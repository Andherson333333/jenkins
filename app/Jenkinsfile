pipeline {
    agent any

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Verification Repositories') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/Andherson333333/jenkis-prueba.git']]
                )
            }
        }

        stage('Scan') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool 'SonarScanner'
                        sh "cd app && ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=jenkins-test"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def qualityGate = waitForQualityGate abortPipeline: true
                        if (qualityGate.status == 'OK') {
                            echo "El control de calidad ha sido aprobado. Continuando con el pipeline."
                        } else {
                            echo "El control de calidad ha fallado. Deteniendo el pipeline."
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def customImage = docker.build("andherson1039/nginx-alpine:${BUILD_NUMBER}", './app')
                }
            }
        }

        stage('Login to Docker Hub and Push') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerhubpwd')]) {
                        sh """
                        docker login -u andherson1039 -p ${dockerhubpwd}
                        docker push andherson1039/nginx-alpine:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }

        stage('Update Deployment in ArgoCD') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'gitlhublogin', gitToolName: 'Default')]) {
                    sh'''
                        cat argocd/deployment.yaml
                        sed -i "s|image: andherson1039/nginx-alpine:[0-9]\\+|image: andherson1039/nginx-alpine:${BUILD_NUMBER}|g" argocd/deployment.yaml
                        cat argocd/deployment.yaml
                        git config --global user.email "jenkins@jenkins.com"
                        git config --global user.name "Jenkins"
                        git add argocd/deployment.yaml
                        git commit -m 'Updated the deployment.yaml | Jenkins Pipeline'
                        git remote -v
                        git push https://github.com/Andherson333333/jenkis-prueba.git HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
    }
}


